var t=()=>[["Root",e=>e.path.length===0],["Resource",e=>e.isMatch("::Root / resources / *")],["Operation",e=>e.isMatch("::Resource / operations / *")],["Param",e=>e.isMatch("::Operation / params / *")],["Option",e=>{if(!e.isMatch("::Param / options / *"))return!1;let o=e.getValue(-2);return["options","multiOptions"].includes(o.type)}],["PropCollection",(e,o)=>e.isMatch("::Param / options / * :: obj")&&"values"in o],["Param",e=>{let o=e.getValue();return e.isMatch("::Param / options / *")&&(typeof o=="string"||typeof o=="object"&&!("value"in o))}],["Param",e=>e.isMatch("::PropCollection / values / *")]];export{t as getTypeResolvers};
//# sourceMappingURL=typeResolvers.js.map
