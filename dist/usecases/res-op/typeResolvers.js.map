{
  "version": 3,
  "sources": ["../../../src/usecases/res-op/typeResolvers.ts"],
  "sourcesContent": ["import { TypeResolvers } from 'src/mark';\nimport { TypeName } from './types';\n\nexport const getTypeResolvers = <T>(): TypeResolvers<TypeName, T> => [\n\t['Root', ctx => ctx.path.length === 0],\n\t['Resource', ctx => ctx.isMatch('::Root / resources / *')],\n\t['Operation', ctx => ctx.isMatch('::Resource / operations / *')],\n\t['Param', ctx => ctx.isMatch('::Operation / params / *')],\n\t['Option', ctx => {\n\t\tif (!ctx.isMatch('::Param / options / *')) {\n\t\t\treturn false;\n\t\t}\n\t\tconst o = ctx.getValue(-2);\n\t\treturn ['options', 'multiOptions'].includes(o.type);\n\t}],\n\t['PropCollection', (ctx, v) => ctx.isMatch('::Param / options / * :: obj') && 'values' in v],\n\t['Param', ctx => {\n\t\tconst v = ctx.getValue();\n\t\treturn ctx.isMatch('::Param / options / *') && (\n\t\t\ttypeof v === 'string'\n\t\t\t|| (typeof v === 'object' && !('value' in v))\n\t\t);\n\t}],\n\t['Param', ctx => ctx.isMatch('::PropCollection / values / *')],\n];\n"],
  "mappings": "AAGO,GAAM,GAAmB,IAAqC,CACpE,CAAC,OAAQ,GAAO,EAAI,KAAK,SAAW,CAAC,EACrC,CAAC,WAAY,GAAO,EAAI,QAAQ,wBAAwB,CAAC,EACzD,CAAC,YAAa,GAAO,EAAI,QAAQ,6BAA6B,CAAC,EAC/D,CAAC,QAAS,GAAO,EAAI,QAAQ,0BAA0B,CAAC,EACxD,CAAC,SAAU,GAAO,CACjB,GAAI,CAAC,EAAI,QAAQ,uBAAuB,EACvC,MAAO,GAER,GAAM,GAAI,EAAI,SAAS,EAAE,EACzB,MAAO,CAAC,UAAW,cAAc,EAAE,SAAS,EAAE,IAAI,CACnD,CAAC,EACD,CAAC,iBAAkB,CAAC,EAAK,IAAM,EAAI,QAAQ,8BAA8B,GAAK,UAAY,EAAC,EAC3F,CAAC,QAAS,GAAO,CAChB,GAAM,GAAI,EAAI,SAAS,EACvB,MAAO,GAAI,QAAQ,uBAAuB,GACzC,OAAO,IAAM,UACT,MAAO,IAAM,UAAY,CAAE,UAAW,IAE5C,CAAC,EACD,CAAC,QAAS,GAAO,EAAI,QAAQ,+BAA+B,CAAC,CAC9D",
  "names": []
}
