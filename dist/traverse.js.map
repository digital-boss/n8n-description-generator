{
  "version": 3,
  "sources": ["../src/traverse.ts"],
  "sourcesContent": ["export type VisitFn<T=any> = (\n\tvalue: unknown,\n\tpath: Array<string | number>,\n\tsourceObj: T,\n) => void;\n\nexport type MapFn<T> = (\n\tvalue: unknown,\n\tpath: Array<string | number>,\n\tsourceObj: T,\n) => any;\n\ntype Action = 'visit' | 'map';\n\nconst traverseInternal = <T, TRes=T>(\n\tfn: MapFn<T>,\n\taction: Action,\n\tvalue: unknown,\n\tpath: Array<string | number>,\n\tsourceObj: T,\n): TRes => {\n\tconst mappedVal = fn(value, path, sourceObj);\n\tconst val = action === 'visit' ? value : mappedVal;\n\tif (val instanceof Array) {\n\t\treturn val.map(\n\t\t\t(v, idx) => traverseInternal(fn, action, v, [...path, idx], sourceObj),\n\t\t) as unknown as TRes;\n\t} else if (val !== null && typeof val === 'object') {\n\t\tconst result = Object.entries(val)\n\t\t\t.map(([k, v]) => [k, traverseInternal(fn, action, v, [...path, k], sourceObj)]);\n\t\treturn Object.fromEntries(result);\n\t}\n\treturn val as TRes;\n};\n\nexport const traverseVisit = <T>(fn: VisitFn<T>, obj: T): void => {\n\ttraverseInternal(fn, 'visit', obj, [], obj);\n};\n\nexport const traverseMap = <T, TRes=T>(fn: MapFn<T>, obj: T): TRes => {\n\treturn traverseInternal(fn, 'map', obj, [], obj);\n};\n"],
  "mappings": "AAcA,GAAM,GAAmB,CACxB,EACA,EACA,EACA,EACA,IACU,CACV,GAAM,GAAY,EAAG,EAAO,EAAM,CAAS,EACrC,EAAM,IAAW,QAAU,EAAQ,EACzC,GAAI,YAAe,OAClB,MAAO,GAAI,IACV,CAAC,EAAG,IAAQ,EAAiB,EAAI,EAAQ,EAAG,CAAC,GAAG,EAAM,CAAG,EAAG,CAAS,CACtE,EACM,GAAI,IAAQ,MAAQ,MAAO,IAAQ,SAAU,CACnD,GAAM,GAAS,OAAO,QAAQ,CAAG,EAC/B,IAAI,CAAC,CAAC,EAAG,KAAO,CAAC,EAAG,EAAiB,EAAI,EAAQ,EAAG,CAAC,GAAG,EAAM,CAAC,EAAG,CAAS,CAAC,CAAC,EAC/E,MAAO,QAAO,YAAY,CAAM,CACjC,CACA,MAAO,EACR,EAEa,EAAgB,CAAI,EAAgB,IAAiB,CACjE,EAAiB,EAAI,QAAS,EAAK,CAAC,EAAG,CAAG,CAC3C,EAEa,EAAc,CAAY,EAAc,IAC7C,EAAiB,EAAI,MAAO,EAAK,CAAC,EAAG,CAAG",
  "names": []
}
