{
  "version": 3,
  "sources": ["../src/transform.ts"],
  "sourcesContent": ["import { VisitFn as MapFn } from './traverse';\nimport { TraverseContext } from './TraverseContext';\n\nexport type ConditionFn<TTypeName=string, TSrc=any> = (value: any, ctx: TraverseContext<TTypeName, TSrc>) => boolean;\nexport type TransformerFn<TTypeName=string, TSrc=any> = (value: any, ctx: TraverseContext<TTypeName, TSrc>) => any;\ntype Transformer<TTypeName, TSrc> = TransformerFn<TTypeName, TSrc> | Array<TransformerFn<TTypeName, TSrc> | ConditionalTransformer<TTypeName, TSrc>>;\ntype ConditionalTransformer<TTypeName, TSrc> = [\n\tConditionFn<TTypeName, TSrc>,\n\tTransformer<TTypeName, TSrc>\n];\nexport type Transformers<TTypeName, TSrc> = Array<ConditionalTransformer<TTypeName, TSrc>>;\n\n\nconst applyTransformersRec = <TTypeName, TSrc>(\n\tconditionFn: ConditionFn<TTypeName, TSrc>,\n\ttransformer: Transformer<TTypeName, TSrc>,\n\tvalue: any,\n\tctx: TraverseContext<TTypeName, TSrc>,\n) => {\n\tif (conditionFn(value, ctx)) {\n\t\tlet result: any = value;\n\t\tif (typeof transformer === 'function') {\n\t\t\tresult = transformer(result, ctx);\n\t\t} else if (transformer instanceof Array) {\n\t\t\ttransformer.forEach(tr => {\n\t\t\t\tif (typeof tr === 'function') {\n\t\t\t\t\tresult = tr(result, ctx);\n\t\t\t\t} else if (tr instanceof Array) {\n\t\t\t\t\tconst [c, t] = tr;\n\t\t\t\t\tresult = applyTransformersRec(c, t, result, ctx);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error('Unexpected value type.');\n\t\t}\n\t\treturn result;\n\t}\n\treturn value;\n};\n\nexport const createMapFromTransformers = <TTypeName, TSrc>(\n\tctx: TraverseContext<TTypeName, TSrc>,\n\ttransformers: Transformers<TTypeName, TSrc>,\n): MapFn => (value: any, path: Array<string | number>, sourceObj: any) => {\n\tctx.path = [...path];\n\tlet result: any = value;\n\tfor (const [cond, tr] of transformers) {\n\t\tresult = applyTransformersRec(cond, tr, result, ctx);\n\t}\n\treturn result;\n};\n\n\n/******************************************************************************\n * Helpers\n */\n\nexport const propSetter = <TTypeName, TSrc>(\n\tpropName: string,\n\tgetter: (value: any, ctx: TraverseContext<TTypeName, TSrc>) => any,\n): TransformerFn<TTypeName, TSrc> => (v, ctx) => {\n\tif (!(propName in v)) {\n\t\tconst r = getter(v, ctx);\n\t\tif (r !== undefined) {\n\t\t\treturn {\n\t\t\t\t...v,\n\t\t\t\t[propName]: r,\n\t\t\t};\n\t\t}\n\t}\n\treturn v;\n};\n\nexport const matchType = <TTypeName=string, TSrc=any>(t: TTypeName): ConditionFn<TTypeName, TSrc> => (v, ctx) => {\n\tconst s = ctx.getData();\n\treturn s !== undefined && s.type === t;\n};\n"],
  "mappings": "AAaA,GAAM,GAAuB,CAC5B,EACA,EACA,EACA,IACI,CACJ,GAAI,EAAY,EAAO,CAAG,EAAG,CAC5B,GAAI,GAAc,EAClB,GAAI,MAAO,IAAgB,WAC1B,EAAS,EAAY,EAAQ,CAAG,UACtB,YAAuB,OACjC,EAAY,QAAQ,GAAM,CACzB,GAAI,MAAO,IAAO,WACjB,EAAS,EAAG,EAAQ,CAAG,UACb,YAAc,OAAO,CAC/B,GAAM,CAAC,EAAG,GAAK,EACf,EAAS,EAAqB,EAAG,EAAG,EAAQ,CAAG,CAChD,CACD,CAAC,MAED,MAAM,IAAI,OAAM,wBAAwB,EAEzC,MAAO,EACR,CACA,MAAO,EACR,EAEa,EAA4B,CACxC,EACA,IACW,CAAC,EAAY,EAA8B,IAAmB,CACzE,EAAI,KAAO,CAAC,GAAG,CAAI,EACnB,GAAI,GAAc,EAClB,OAAW,CAAC,EAAM,IAAO,GACxB,EAAS,EAAqB,EAAM,EAAI,EAAQ,CAAG,EAEpD,MAAO,EACR,EAOa,EAAa,CACzB,EACA,IACoC,CAAC,EAAG,IAAQ,CAChD,GAAI,CAAE,KAAY,IAAI,CACrB,GAAM,GAAI,EAAO,EAAG,CAAG,EACvB,GAAI,IAAM,OACT,MAAO,CACN,GAAG,EACH,CAAC,GAAW,CACb,CAEF,CACA,MAAO,EACR,EAEa,EAAY,AAA6B,GAA+C,CAAC,EAAG,IAAQ,CAChH,GAAM,GAAI,EAAI,QAAQ,EACtB,MAAO,KAAM,QAAa,EAAE,OAAS,CACtC",
  "names": []
}
